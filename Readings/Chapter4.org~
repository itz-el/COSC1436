* 4-1 Accessing Characters and Substrings in Strings
  In this section, we examine the internal structure of a string
  more closely, and learn how to extract portions of a string called
  substrings.
** The Structure of Strings
   a string is a *data structure* - a compound unit that consists of
   several other pieces of data. A string is a sequence of zero or
   more characters.
   
   Although there is no difference between single
   and double quote strings, common practice is to use single quotes
   with single-character strings, and double quotes with the empty
   string or multi-character strings.
   
   When working with strings, one should be aware of the strings
   length and the positions of the individual characters within the
   string. A string's length is the number of characters it contains.
   Python's *len* functions returns this value when it is passed a
   string. The positions of a string's characters are numbered from
   0, on the left, to the length minus 1, on the right.
   
   For example:
   >>> len("Hello!") # len is passed the string "Hello!"
   6                 # the length of said string is returned
                       an integer value
** The Subscript Operator
   Although a simple for loop can access any of the characters in
   a string, sometimes you just want to inspect one character at
   a given position without visiting them all. This is made possible
   by the *subscript operator []*.

   The simplest form of the subscript operation:
   <a string>[<an integer expression>]

   The first part of this operation is the string you want to inspect.
   The integer expression indicates the position (of 0 to length-1)
   of a particular character in that string. This is also known as the
   *index* - "The relative position of a component of a linear data 
   structure or collection."

   Python also allows negative subscript values to access characters at
   or near the end of a string. Counting backwards from -1 accesses
   characters from the right end of the string to the left.
** Slicing for Substrings
   Pythons subscript operator can be used to obtain a substring
   through a process called *slicing* - "An operation that returns
   a subsection of a linear collection". To return a substring from
   the subscript operator, a colon is used to denote a range of values.
   
   Subscript operator for slicing:
   <a string>[<first position>:<second position - 1>]

   Example:
   >>> name = "myfile.txt"   # the string
   >>> name[0:1]             # return characters 0 to 1
   'm'
   >>> name[2:6]             # return characters 2 to 6
   'file'
   >> name[-3:]              # return last 3 characters

   As seen in the last subexample, providing no value after the colon
   returns from the first value to the end of the string.
** Testing for a Substring with the in Operator
   When searching for a known substring in a string, like for the ".txt"
   extention in a text file, it is best to use the Python operator *in*.
   When used with strings, the left operand of /in/ is a target substring,
   and the right operand is the string to be searched. The operator in
   returns True if the target substring is in the string, and False if it
   is not.

   in operator:
   <substring to find> in <string>

   example:
   >>> "Hello" in "Hello World!"
   True
   >>> "White" in "Red Blue Green"
   False

   The in operator can be combined with a for loop to run through
   strings and sort them for a known substring:

   >> fileList = ["file.txt", "program.exe", "journal.txt"]
   >> for fileName in fileList:
          if ".text" in fileName:
	      print(fileName)
      file.text
      journal.text
      
* 4-2 Data Encryption
** Encryption Basics  
  As data trasmitted across the internet gets more and more vulnerable
  to observation through things like *sniffing software*- "programs
  that allow the user to spy on data transmissions over a network.",
  most applications now use *data encryption* to protect information
  transmitted on networks. Examples of such are FTPS, and HTTPS, which
  are secure versions of FTP and HTTP for file transfer and Web page
  transfer, respectively.

  During encryption, the sender *encrypts* a message by translating it
  to a secret code,called a *cipher text*. At the other end, the
  reciever *decrypts* the cipher text back to its original *plaintext*,
  which is its source unencrypted form.
*** Ceaser Cipher
    "An encryption method that replaces characters with other characters 
    a given distance away in the character set."
    
    For positive distances, the method wraps around to the beginning of
    the sequence to locate the replacement characters for those characters
    near its end.

    Ceaser cipher example with distance +3:
    Ascii
    97 98 99 100 101
    a  b  c  d   e

    Cipher Text
    100 101 102 103 104
    d   e   f   g   h
